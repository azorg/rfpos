/*
 * Библиотека функций линейной алгебры (линейные фильтры)
 * Version: 0.7a
 * File: "la_filt.h"
 * Coding: UTF8
 * (C) 2007 Alex Zorg <azorg@mail.ru>
 * Licensed by GNU General Public License version 2
 * Last update: 2008.02.02
 */

#ifndef LA_FILT_H
#define LA_FILT_H

#include "la.h" // операции с векторами и матрицами

// класс простого рекурентного ФНЧ с АЧХ "sin(x)/x"
typedef struct {
  la_matrix_t d;  // цифровая линия задержки
  la_vector_t rs; // рекурентный накопитель
  la_vector_t ds; // прямой накопитель (для коррекции рекурентного)
  int index;      // индекс в линии задержки для следующего входного вектора
  la_float_t k;   // нормирующий коэффициент 1/n
} la_filt_t;

// класс линейного КИХ (FIR) фильтра с вещесвенными коэффицентами
typedef struct {
  la_vector_t k; // импульсная характеристика
  la_matrix_t d; // цифровая линия задержки
  int index; // индекс в линии задержки для следующего входного вектора
} la_fir_t;

// класс интегратора методом трапеции
typedef struct {
  la_vector_t prev; // предыдущее значение производной
} la_integ_t;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// ********************************************************
// методы класса простого рекурентного ФНЧ с АЧХ "sin(x)/x"
// ********************************************************

// инициализация простого рекурентного ФНЧ с АЧХ "sin(x)/x"
void la_filt_init(
  la_filt_t *filt, // структура фильтра
  int vector_size, // размер фильтруемого вектора
  int filt_size);  // размер фильтра

// денициализация простого рекурентного ФНЧ с АЧХ "sin(x)/x"
void la_filt_free(la_filt_t *fir);

// заполнить линию задержки ФНЧ фильтра
void la_filt_fill(la_filt_t *filt, const la_float_t *v);

// выполнить коррекцию линию задержки ФНЧ фильтра (вычесть вектор)
void la_filt_corr(la_filt_t *filt, const la_float_t *v);

// выполнить шаг ФНЧ фильтра с АЧХ "sin(x)/x"
void la_filt_step(
  la_filt_t *filt,        // структура фильтра
  const la_float_t *inp,  // указатель на данные входного вектора 
  la_float_t *out);       // указатель на данные выходного вектора

// *************ё*****************************************
// методы класса FIR фильтра с вещесвенными коэффицентами
// ******************************************************

// инициализация FIR фильтра с вещесвенными коэффицентами
void la_fir_init(
  la_fir_t *fir,        // структура фильтра
  int vector_size,      // размер фильтруемого вектора
  int filt_size,        // размер фильтра
  const la_float_t *k); // импульсная характеристика [filt_size]

// деинициализация FIR фильтра с вещесвенными коэффицентами
void la_fir_free(la_fir_t *fir);

// заполнить линию задержки FIR фильтра
void la_fir_fill(la_fir_t *fir, const la_float_t *v);

// выполнить коррекцию линию задержки FIR фильтра (вычесть вектор)
void la_fir_corr(la_fir_t *fir, const la_float_t *v);

// выполнить шаг FIR фильтра
void la_fir_step(
  la_fir_t *fir,          // структура фильтра
  const la_float_t *inp,  // указатель на данные входного вектора 
  la_float_t *out);       // указатель на данные выходного вектора

// ******************************************
// методы класса интегратора методом трапеции
// ******************************************

// инициализация интегратора методом трапеции
void la_integ_init(
  la_integ_t *integ, // структура фильтра
  int vector_size);  // размер фильтруемого вектора

// деинициализация интегратора методом трапеции
void la_integ_free(la_integ_t *integ);

// выполнить шаг интегратора методом трапеции
void la_integ_step(
  la_integ_t *integ,     // структура фильтра
  la_float_t dt,         // шаг разбиения (обычно приращение времени)
  const la_float_t *inp, // входная выборка производной вектора
  la_float_t *out);      // выходная выборка конечного приращения

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // LA_FILT_H

/*** end of "la_filt.h" file ***/

